#!/bin/sh
#
# SliTaz Pizza host cmdline utility - Create environment, chroot, clean.
# Backup and purge should be done via cron jobs.
#

[ -f "/etc/slitaz/pizza.conf" ] && . /etc/slitaz/pizza.conf
[ -f "pizza.conf" ] && . ./pizza.conf

# Pizza DB files.
chroot="$PIZZA/chroot"
pkgs="${chroot}$SLITAZ/packages"
cache="${chroot}$SLITAZ/cache"
queue="${chroot}$SLITAZ/queue"
tmp="${chroot}$SLITAZ/tmp"
feeds="${chroot}$SLITAZ/xml"
activity="$cache/activity"
builds="$cache/builds"
public="$VHOST/public"
bindpub="${chroot}$SLITAZ/public"
hgflavors="$cache/flavors"

#
# Functions
#

usage() {
	cat << EOT

$(echo -e "\033[1mUsage:\033[0m") pizza [command]

$(echo -e "\033[1mCommands:\033[0m")
  usage        Display this short usage.
  setup        Setup Pizza build environment.
  up-files     Update chroot and web files from datadir.
  exec         Execute a command in chroot.
  chroot       Chroot in Pizza environment.
  start        Start Pizza bot and mount packages.
  stop         Stop Pizza and unmount packages.
  get-lists    Get latest flavor skel from Hg.
  sync-pkgs    Sync packages from SliTaz mirror.
  purge        Purge Pizza tmp directory.
  clean        Complete chroot clean-up.

EOT
}

# Status function.
status() {
	if [ $? = 0 ]; then
		echo " Done"
	else
		echo " Failed"
	fi
}

# Get latest flavor skel packages list. We use Hg to get latest list
# and addfiles. Then build a HTML list with version from the local
# packages mirror.
get_pkgs_lists() {
	cd $hgflavors && hg pull -u
	for skel in base justx gtkonly core
	do
		echo -n "Creating $skel packages.desc... "
		allpkgs="$SLITAZ/$SLITAZ_VERSION/packages/packages.desc"
		pkgsdesc="$skel/packages.desc"
		rm -f $pkgsdesc && touch $pkgsdesc
		for pkg in $(cat $skel/packages.list)
		do
			IFS="|"
			grep "^$pkg |" $allpkgs | cut -f 1,2,3 -d "|" | \
			while read PACKAGE VERSION SHORT_DESC
			do
				echo "$PACKAGE $VERSION \"$SHORT_DESC\"" >> $pkgsdesc
			done
			unset IFS
		done
		status
	done
}

# The Bot is chrooted and can't access main pizza.conf
bot_config() {
	config=$chroot/etc/slitaz/pizza-bot.conf
	echo '# Pizza Bot configuration.' > $config
	grep ^PIZZA_URL /etc/slitaz/pizza.conf >> $config
	grep ^MAIL_DOMAIN /etc/slitaz/pizza.conf >> $config
	grep ^MAIL_SERVER /etc/slitaz/pizza.conf >> $config
}

# Log activities, we want first letter capitalized.
log() {
	grep ^[A-Z] | \
		sed s"#^[A-Z]\([^']*\)#$(date '+%Y-%m-%d %H:%M') : \0#" >> $activity
}

#
# Commands
#

case "$1" in
	setup)
		# Setup build host.
		crontabs="$chroot/var/spool/cron/crontabs"
		if [ -d "$chroot/proc" ]; then
			echo "Chroot already exists: $chroot" && exit 0
		fi
		echo ""
		echo "Setting up Pizza environment..."
		mkdir -p $crontabs $cache $pkgs $tmp $queue $bindpub $feeds
		touch $activity $builds
		chmod 0777 $tmp $queue $cache
		chmod 0666 $activity
		for pkg in slitaz-base-files busybox tazlito tazpkg postfix \
			shared-mime-info
		do
			echo "Installing package: $pkg"
			tazpkg get-install $pkg --root=$chroot >/dev/null
		done

		# Files
		echo -n "Creating needed files..."
		cp -f /etc/resolv.conf $chroot/etc
		mkdir -p $chroot/etc/init.d
		bot_config

		# No more needed when slitaz-base-files have rc.functions
		cp -f /etc/init.d/rc.functions $chroot/etc/init.d
		echo '# Check pizza queue every 15 mins' > $crontabs/root
		echo '*/15  * * * * /usr/bin/pizza-bot' >> $crontabs/root
		status

		# We want Tazlito to build ISOs in /home/slitaz
		echo -n "Updating Tazlito default configuration..."
		sed -i s'/^WORK_DIR=.*/WORK_DIR="\/home\/slitaz"/' \
			$chroot/etc/tazlito/tazlito.conf
		status

		echo -n "Installing Pizza Bot..."
		cp -a $DATA/pizza-bot $chroot/usr/bin
		status
		cd $cache

		# We use files from Hg repo defined in pizza.conf.
		if [ ! -d "$hgflavors" ]; then
			cd $cache && hg clone $HG && cd -
		fi
		get_pkgs_lists

		# Web interface and public dir
		echo -n "Installing the web interface..."
		mkdir -p $public && chmod 0777 $public
		cp -a $DATA/web/* $VHOST
		status
		echo "Pizza chroot : $chroot"
		echo "Vhost path   : $VHOST"
		echo ""
		echo "To start Pizza Bot: $(basename $0) start"
		echo "" ;;
	up-files)
		# Update files in chroot when pizza is updated on host.
		echo -n "Updating chroot and virtual host..."
		cp -a $DATA/web/* $VHOST
		cp -a $DATA/pizza-bot $chroot/usr/bin
		bot_config
		status ;;
	exec)
		# Execute a command in chroot.
		[ "$2" ] || exit 0
		chroot $chroot $2 ;;
	chroot)
		# Chroot in Pizza environment.
		echo -e "\nChrooting to: $chroot\n"
		chroot $chroot /bin/sh --login
		echo -e "\nExiting Pizza chroot...\n" ;;
	start)
		# Mount and start Pizza
		if ! mount | fgrep -q "pizza/chroot"; then
			gettext -e "Mounting packages and public...\n"
			mount -o bind $SLITAZ/$SLITAZ_VERSION/packages $pkgs
			mount -o bind $public $bindpub
		fi
		chroot $chroot /etc/init.d/crond start
		[ "$MAIL_DOMAIN" ] && chroot $chroot /etc/init.d/postfix start ;;
	stop)
		# Unmount and stop Pizza
		if mount | fgrep -q "pizza/chroot"; then
			gettext -e "Unmounting packages and public...\n"
			umount $pkgs
			umount $bindpub
		fi
		chroot $chroot /etc/init.d/crond stop
		[ "$MAIL_DOMAIN" ] && chroot $chroot /etc/init.d/postfix stop ;;
	get-lists)
		get_pkgs_lists ;;
	sync-pkgs)
		echo "Syncing all $SLITAZ_VERSION packages..."
		echo "Syncing all $SLITAZ_VERSION packages" | log
		rsync -azHv --delete $RSYNC_PKGS $LOCAL_PKGS
		du -sh $LOCAL_PKGS ;;
	backup)
		echo "Creating Pizza backup..."
		bak="pizza-$(date "+%Y%m%d")"
		dir="$PIZZA/backups/$bak"
		mkdir -p $dir && cd $PIZZA/backups
		cp -a $cache $dir
		cp -a $chroot/home/slitaz/xml $dir
		for flavor in $(ls $public)
		do
			if [ -f "$public/$flavor/receipt" ]; then
				mkdir -p $dir/public/$flavor
				. $public/$flavor/receipt
				cp -f $public/$flavor/$FLAVOR.flavor \
					$dir/public/$flavor 2>/dev/null
			fi
		done
		tar cf $bak.tar $bak && rm -rf $bak
		lzma e $bak.tar $bak.tar.lzma
		du -sh $bak.tar.lzma ;;
	purge)
		# Remove tmp file older than 24 hours and ISO older than 15 days.
		# TODO: Improve and use configs from pizza.conf
		echo "Purging temporary files and old flavors" | log
		echo "Purging tmp files..."
		find $tmp -mtime +1 | xargs rm -rf
		echo "Purging ISO's..."
		find $public -mtime +15 | xargs rm -rf ;;
	clean)
		# Clean all chroot.
		echo -e "\nCleaning: $chroot"
		cd $chroot || exit 1
		for i in *
		do
			[ "$i" == "home" ] || rm -rf $i
		done && echo "" ;;
	*)
		usage ;;
esac
exit 0
